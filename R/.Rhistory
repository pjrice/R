paste(paste(datadir,subjdirs[i],sep="\\"),subjfiles[ii],sep="\\")
help(save)
subjfiles{1}
subjfiles[1]
subjfiles[[1]]
subjfiles[1](1)
subjfiles[1]
help(strsplit)
strsplit(subjfiles[1])
strsplit(subjfiles[1],".mat")
subjdirs[1]
paste(datadir,subjdirs[i],sep="\\")
paste(paste(datadir,subjdirs[i],sep="\\"),strsplit(subjfiles[ii],".mat"),sep="\\")
help("paste")
strsplit(subjfiles[ii],".mat")
paste(strsplit(subjfiles[ii],".mat"),"RData",sep=".")
paste(paste(datadir,subjdirs[i],sep="\\"),paste(strsplit(subjfiles[ii],".mat"),"RData",sep="."),sep="\\")
fname <- paste(paste(datadir,subjdirs[i],sep="\\"),paste(strsplit(subjfiles[ii],".mat"),"RData",sep="."),sep="\\")
save(data,fname)
save(data,file=fname)
help("clearNames")
rm(list=ls())
load("Z:/Work/UW/projects/RR_TMS/data/data_R/good_subjects/1822/1822_1.RData")
help(rm)
help(remove)
library(R.matlab)
datadir <- "Z:\\Work\\UW\\projects\\RR_TMS\\data\\data_R\\good_subjects"
subjdirs <- list.files(datadir)
i=1
ii=``
ii=1
subjfiles <- list.files(paste(datadir,subjdirs[i],sep="\\"))
data <- readMat(paste(paste(datadir,subjdirs[i],sep="\\"),subjfiles[ii],sep="\\"))
fname <- paste(paste(datadir,subjdirs[i],sep="\\"),paste(strsplit(subjfiles[ii],".mat"),"RData",sep="."),sep="\\")
rm(data,fname)
rm(list=ls())
RR_TMS_mat2R
RR_TMS_mat2R.R
source('Z:/R/R/RR_TMS/RR_TMS_mat2R.R')
rm(list=ls())
source('Z:/R/R/RR_TMS/RR_TMS_mat2R.R')
list.files(paste(datadir,subjdirs[i],sep="\\"))
help(range)
help("length")
length(subjdirs)
rm(list=ls())
source('Z:/R/R/RR_TMS/RR_TMS_mat2R.R')
help(range)
1:length(subjdirs)
rm(list=ls())
source('Z:/R/R/RR_TMS/RR_TMS_mat2R.R')
paste(paste(datadir,subjdirs[i],sep="\\"),subjfiles[ii],sep="\\")
subjfiles[ii]
rm(list=ls())
source('Z:/R/R/RR_TMS/RR_TMS_mat2R.R')
help(lapply)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library("tidyverse")
install.packages(pkgs = c("coda", "rjags", "runjags"), repos = "http://cran.fhcrc.org/")
library("runjags")
library("rjags")
install.packages("rjags")
library("rjags")
source('~/Dropbox/Documents/2017/Winter Quarter/Psych 548/Materials/Week1/p548.01-2/test.jags.install.r')
source('~/Dropbox/Documents/2017/Winter Quarter/Psych 548/Materials/Week1/p548.01-2/test.jags.install.r')
p1.1 = c(9,8,1,9,5)
p1.1 = c(9,8,1,9,5)
p1.1 = c(9,8,1,9,5)
p1.1
p1.2 = 2*p1.1
p1.2
p1.3 = sqrt(p1.1)
p1.3
m2 = matrix( 1:12, ncol = 3, byrow = TRUE )
m1 = matrix( 1:12, ncol = 3 )
m2
m1
m3 = matrix( 11:16, ncol = 2)
m3
m4 = matrix( 11:16, ncol = 2, byrow = TRUE)
m4
x1 = c(1,3,5,7)
x2 = 1:4
x3 = (1:4)+3
s1 = c("Bob","Joe","Tom","Sol")
s2 = c("Lin","Aki","Kyu","Kim")
x3
ms1 = cbind(s1,s2)
ms1
mx1
mx1 = cbind(x1,x2,x3)
mx1
ms2 = rbind(s1,s2)
mx2 = rbind(x1,x2,x3)
ms2
mx2
odd1 = cbind(x1,s1)
odd1
bayinf = function(
priors,  #vector of n probabilities that represent the probablities of n hypotheses
likelihoods ) #vector of n likelihoods of the data D given hypothesis Hn
{
#calculate the probability of the data (our denominator in Bayes' Rule)
pD2 = sum(priors*likelihoods)
#calculate the posterior (i.e apply Bayes' Rule)
p.post = priors*likelihoods/pD2
return(p.post)
}
priors = c(0.2,0.3,0.4,0.1)
likelihoods = c(0.8,0.8,0.3,0.2)
test = bayinf(priors,likelihoods)
test
p.H = 0.33
p.nH = 1-p.H
p.H
p.nH
priors = c(p.H,p.nH)
priors
likelihoods = c(pD..H,pD..nH)
pD..H = 0.65
pD..nH = 0.08
likelihoods = c(pD..H,pD..nH)
likelihoods
rm(priors,likelihoods)
priors = c(p.H,p.nH)
likelihoods = c(pD..H,pD..nH)
priors
likelihoods
sick = bayinf(priors,likelihoods)
sick
library("rjags")
bayinf = function(
priors,  #vector of n probabilities that represent the probablities of n hypotheses
likelihoods ) #vector of n likelihoods of the data D given hypothesis Hn
{
#calculate the probability of the data (our denominator in Bayes' Rule)
pD2 = sum(priors*likelihoods)
#calculate the posterior (i.e apply Bayes' Rule)
p.post = priors*likelihoods/pD2
return(p.post)
}
#test the newly created funtion
priors = c(0.2,0.3,0.4,0.1)
likelihoods = c(0.8,0.8,0.3,0.2)
test = bayinf(priors,likelihoods) #it works!
#Problem 5
#use the new BI function to solve some problems
rm(priors,likelihoods) #remove previous priors and likelihoods
#set up some givens
p.H = 0.33
p.nH = 1-p.H
pD..H = 0.65
pD..nH = 0.08
priors = c(p.H,p.nH)
likelihoods = c(pD..H,pD..nH)
sick = bayinf(priors,likelihoods)
sum(sick)
sick
1-0.65
1-0.08
1-0.33
rm(list = ls())
bayinf = function(
priors,  #vector of n probabilities that represent the probablities of n hypotheses
likelihoods ) #vector of n likelihoods of the data D given hypothesis Hn
{
#calculate the probability of the data (our denominator in Bayes' Rule)
pD2 = sum(priors*likelihoods)
#calculate the posterior (i.e apply Bayes' Rule)
p.post = priors*likelihoods/pD2
return(p.post)
}
#test the newly created funtion
priors = c(0.2,0.3,0.4,0.1)
likelihoods = c(0.8,0.8,0.3,0.2)
test = bayinf(priors,likelihoods) #it works!
#Problem 5
#use the new BI function to solve some problems
rm(priors,likelihoods) #remove previous priors and likelihoods
#set up some givens
p.sick = 0.33
p.nsick = 1-p.H
p.Tplus..sick = 0.65
p.Tplus..nsick = 0.08
p.Tneg..sick = 1-p.Tplus..sick
p.Tneg..nsick = 1-p.Tplus..nsick
p.Tneg..sick
p.Tneg..nsick
p.nsick
p.nsick = 1-p.sick
p.nsick
priors = c(p.sick,p.nsick)
likelihoods = c(p.Tplus..sick,p.Tplus..nsick,p.Tneg..sick,p.Tneg..nsick)
sick = bayinf(priors,likelihoods)
sick
sum(priors*likelihoods)
.99*.001
rm(likelihoods,sick)
likelihoods = c(p.Tneg..sick,p.Tneg..nsick)
sick = bayinf(priors,likelihoods)
sick
sick[1]
sum(sick)
odds = sick[1]/sick[2]
odds
1/.187
test = 1/.187
test
.187*test
1*test
library(R.matlab)
data = readMat(/media/storage/testing_ground/MATLAB/all_subjects/RR_TMS_Table.mat)
data = readMat("/media/storage/testing_ground/MATLAB/all_subjects/RR_TMS_Table.mat")
d <- as.data.frame(data)
d
data
dm(data)
dim(data)
length(data)
data$datapath
data$``
rm(list=ls())
data = readMat("/media/storage/testing_ground/MATLAB/all_subjects/table4R.mat")
d <- as.data.frame(data)
dtable = read.csv("/media/storage/testing_ground/MATLAB/all_subjects/table4R.txt")
dtable
head(dtable)
library(car)
library('car')
install.packages(car)
install.packages('car')
library(car)
rm(list=ls())
dtable = read.csv("/media/storage/testing_ground/MATLAB/all_subjects/means_table.txt")
head(dtable)
fuckthis.aov = with(dtable,
aov(cond_mean ~ SF * PV * EL * InfIns + Error(subj_id / (SF * PV * EL * InfIns))))
summary(fuckthis.aov)
fuckthis2.aov = with(dtable,
aov(cond_mean ~ SF * PV + Error(subj_id / (SF * PV))))
summary(fuckthis2.aov)
rm(list=ls())
dtable = read.csv("/media/storage/testing_ground/MATLAB/all_subjects/means_table.txt")
fuckthis.aov = with(dtable,
aov(cond_mean ~ SF * PV * EL * InfIns + Error(subj_id / (SF * PV * EL * InfIns))))
fuckthis2.aov = with(dtable,
aov(cond_mean ~ SF * PV + Error(subj_id / (SF * PV))))
rm(list=ls())
head(dtable)
dtable = read.csv("/media/storage/testing_ground/MATLAB/all_subjects/means_table.t
head(dtable)
dtable = read.csv("/media/storage/testing_ground/MATLAB/all_subjects/means_table.t
dtable = read.csv("/media/storage/testing_ground/MATLAB/all_subjects/means_table.txt")
head(dtable)
FT.aov = with(dtable,
aov(cond_mean ~ SF * PV * EL * InfIns + Error(subj_id / (SF * PV * EL * InfIns))))
summary(FT.aov)
FT2.aov = with(dtable,
aov(cond_mean ~ SF * PV + Error(subj_id / (SF * PV))))
summary(FT2.aov)
FT3.aov = with(dtable,
aov(cond_mean ~ SF * EL + Error(subj_id / (SF * EL))))
summary(FT3.aov)
FT4.aov = with(dtable,
aov(cond_mean ~ SF * InfIns + Error(subj_id / (SF * InfIns))))
summary(FT4.aov)
FT5.aov = with(dtable,
aov(cond_mean ~ PV * EL + Error(subj_id / (PV * EL))))
summary(FT5.aov)
FT6.aov = with(dtable,
aov(cond_mean ~ PV * InfIns + Error(subj_id / (PV * InfIns))))
summary(FT6.aov)
FT7.aov = with(dtable,
aov(cond_mean ~ EL * InfIns + Error(subj_id / (EL * InfIns))))
summary(FT3.aov)
FT8.aov = with(dtable,
aov(cond_mean ~ SF * PV * EL + Error(subj_id / (SF * PV * EL))))
summary(FT8.aov)
FT9.aov = with(dtable,
aov(cond_mean ~ SF * PV * InfIns + Error(subj_id / (SF * PV * InfIns))))
summary(FT9.aov)
FT10.aov = with(dtable,
aov(cond_mean ~ SF * EL * InfIns + Error(subj_id / (SF * EL * InfIns))))
summary(FT10.aov)
FT11.aov = with(dtable,
aov(cond_mean ~ PV * EL * InfIns + Error(subj_id / (PV * EL * InfIns))))
summary(FT11.aov)
install.packages('rmarkdown')
hyp1like = dbinom(x=8,size=20,prob=0.6)
hyp1like
hyp2like = dbinom(x=8,size=20,prob=0.5)
hyp2like
BF12 = hyp1like/hyp2like
BF12
hyp2like/hyp2like
rm(list=ls())
hyp1like = dbinom(x=59,size=100,prob=0.6)
hyp2like = dbinom(x=59,size=100,prob=0.5)
BF12 = hyp1like/hyp2like
BF12
rm(list=ls())
hyp1like = dbinom(x=8,size=20,prob=0.6)
hyp2like = dbinom(x=8,size=20,prob=0.5)
BF12 = hyp1like/hyp2like
BF12
1/BF12
rm(list=ls())
library(rjags)
setwd('C:\\Users\\ausma_000\\Dropbox\\Documents\\2017\\Winter Quarter\\Psych 548\\Assignments\\4')
# File:   final.data.p548.w17.r                                   ----
# Title:  Final Exam Data Set                                     ----
# =============================================================== ====
# Table 1.   Creating the BrainSize data set                      ----
data.ini = c(
0, 133, 132, 124, 118, 64.5, 816932,
1, 140, 150, 124, -9, 72.5, 1001121,
1, 139, 123, 150, 143, 73.3, 1038437,
1, 133, 129, 128, 172, 68.8, 965353,
0, 137, 132, 134, 147, 65.0, 951545,
0, 99, 90, 110, 146, 69.0, 928799,
0, 138, 136, 131, 138, 64.5, 991305,
0, 92, 90, 98, 175, 66.0, 854258,
1, 89, 93, 84, 134, 66.3, 904858,
1, 133, 114, 147, 172, 68.8, 955466,
0, 132, 129, 124, 118, 64.5, 833868,
1, 141, 150, 128, 151, 70.0, 1079549,
1, 135, 129, 124, 155, 69.0, 924059,
0, 140, 120, 147, 155, 70.5, 856472,
0, 96, 100, 90, 146, 66.0, 878897,
0, 83, 71, 96, 135, 68.0, 865363,
0, 132, 132, 120, 127, 68.5, 852244,
1, 100, 96, 102, 178, 73.5, 945088,
0, 101, 112, 84, 136, 66.3, 808020,
1, 80, 77, 86, 180, 70.0, 889083,
1, 83, 83, 86, -9, -9, 892420,
1, 97, 107, 84, 186, 76.5, 905940,
0, 135, 129, 134, 122, 62.0, 790619,
1, 139, 145, 128, 132, 68.0, 955003,
0, 91, 86, 102, 114, 63.0, 831772,
1, 141, 145, 131, 171, 72.0, 935494,
0, 85, 90, 84, 140, 68.0, 798612,
1, 103, 96, 110, 187, 77.0, 1062462,
0, 77, 83, 72, 106, 63.0, 793549,
0, 130, 126, 124, 159, 66.5, 866662,
0, 133, 126, 132, 127, 62.5, 857782,
1, 144, 145, 137, 191, 67.0, 949589,
1, 103, 96, 110, 192, 75.5, 997925,
1, 90, 96, 86, 181, 69.0, 879987,
0, 83, 90, 81, 143, 66.5, 834344,
0, 133, 129, 128, 153, 66.5, 948066,
1, 140, 150, 124, 144, 70.5, 949395,
0, 88, 86, 94, 139, 64.5, 893983,
1, 81, 90, 74, 148, 74.0, 930016,
1, 89, 91, 89, 179, 75.5, 935863 )
data.2 = ifelse( data.ini == -9, NA, data.ini )
brain.mat = matrix( data.2, ncol = 7, byrow = T )
dimnames(brain.mat) = list( NULL,
c("code.ini", "fsiq", "viq", "piq",
"weight", "height", "mri.cnt") )
brain.mat = brain.mat[ order(brain.mat[,"code.ini"]), ]
# Create a factor variable for gender.
gen.char = ifelse(
brain.mat[,"code.ini"] == 0, "female", "male")
gender = factor(gen.char)
gen.code = as.numeric(gender)
brain.fm = data.frame( gender, gen.code,
brain.mat[ , c("fsiq", "viq", "piq",
"weight", "height", "mri.cnt")] )
View(brain.fm)
m.data = subset(brain.fm, brain.fm$gender=='male')
View(m.data)
summary(brain.fm)
mri.x = mri.cnt/10000
brain.fm$mri.x = brain.fm$mri.cnt/10000
summary(brain.fm)
sp1 = ggplot(brain.fm, aes(x=mri.x, y=viq))
(sp1+labs(title='The relationship between MRI count and Verbal IQ',x = 'MRI count', y = 'Verbal IQ'))
sp1 = ggplot(brain.fm, aes(x=mri.x, y=viq))
(sp1+labs(title='The relationship between MRI count and Verbal IQ',x = 'MRI count', y = 'Verbal IQ'))
library(ggplot2)
sp1 = ggplot(brain.fm, aes(x=mri.x, y=viq))
(sp1+labs(title='The relationship between MRI count and Verbal IQ',x = 'MRI count', y = 'Verbal IQ'))
(sp1+geom_point()+labs(title='The relationship between MRI count and Verbal IQ',x = 'MRI count', y = 'Verbal IQ'))
data = read.table('/home/patrick/Dropbox/Documents/Groningen/DDM/Day1/day1/subj2Dat.dat')
names(data) = c('condition','accuracy','RT')
data$condition = as.factor(data$condition)
levels(data$condition) = c('50_50','60_40','75_25','90_10')
cond1 = data[data$condition=='50_50']
cond1 = data[data$condition=='50_50',]
mean(cond1[,2])
corrCond1 = cond1[cond1$accuracy==1,]
plot(density(corrCond1[,3]),xlab='RT (ms)',main='RT histogram 50/50 condition')
View(data)
View(cond1)
cond1 = data[data$condition=='50_50',]
cond2 = data[data$condition=='60_40',]
cond3 = data[data$condition=='75_25',]
cond4 = data[data$condition=='90_10',]
#report accuracy in this condition
mean(cond1[,2])
mean(cond2[,2])
mean(cond3[,2])
mean(cond4[,2])
#select only correct trials (since RT is typically only reported for correct trials)
corrCond1 = cond1[cond1$accuracy==1,]
corrCond2 = cond1[cond2$accuracy==1,]
corrCond3 = cond1[cond3$accuracy==1,]
corrCond4 = cond1[cond4$accuracy==1,]
plot(density(corrCond1[,3]),xlab='RT (ms)',main='RT histogram 50/50 condition')
plot(density(corrCond2[,3]),xlab='RT (ms)',main='RT histogram 60/40 condition')
plot(density(corrCond3[,3]),xlab='RT (ms)',main='RT histogram 75/25 condition')
plot(density(corrCond4[,3]),xlab='RT (ms)',main='RT histogram 90/10 condition')
rm(list=ls())
data = read.table('/home/patrick/Dropbox/Documents/Groningen/DDM/Day1/day1/subj2Dat.dat')
#in this dataset: column 1==condition; column 2==accuracy; column 3==RT in ms
names(data) = c('condition','accuracy','RT')
data$condition = as.factor(data$condition)
levels(data$condition) = c('50_50','60_40','75_25','90_10')
#select a condition
cond1 = data[data$condition=='50_50',]
cond2 = data[data$condition=='60_40',]
cond3 = data[data$condition=='75_25',]
cond4 = data[data$condition=='90_10',]
#report accuracy in this condition
mean(cond1[,2])
mean(cond2[,2])
mean(cond3[,2])
mean(cond4[,2])
#select only correct trials (since RT is typically only reported for correct trials)
corrCond1 = cond1[cond1$accuracy==1,]
corrCond2 = cond2[cond2$accuracy==1,]
corrCond3 = cond3[cond3$accuracy==1,]
corrCond4 = cond4[cond4$accuracy==1,]
plot(density(corrCond1[,3]),xlab='RT (ms)',main='RT histogram 50/50 condition')
plot(density(corrCond2[,3]),xlab='RT (ms)',main='RT histogram 60/40 condition')
plot(density(corrCond3[,3]),xlab='RT (ms)',main='RT histogram 75/25 condition')
plot(density(corrCond4[,3]),xlab='RT (ms)',main='RT histogram 90/10 condition')
rm(list=ls())
data = read.table('/home/patrick/Dropbox/Documents/Groningen/DDM/Day1/day1/subj1Dat.dat')
#in this dataset: column 1==condition; column 2==accuracy; column 3==RT in ms
names(data) = c('condition','accuracy','RT')
data$condition = as.factor(data$condition)
levels(data$condition) = c('50_50','60_40','75_25','90_10')
#select a condition
cond1 = data[data$condition=='50_50',]
cond2 = data[data$condition=='60_40',]
cond3 = data[data$condition=='75_25',]
cond4 = data[data$condition=='90_10',]
#report accuracy in this condition
mean(cond1[,2])
mean(cond2[,2])
mean(cond3[,2])
mean(cond4[,2])
#select only correct trials (since RT is typically only reported for correct trials)
corrCond1 = cond1[cond1$accuracy==1,]
corrCond2 = cond2[cond2$accuracy==1,]
corrCond3 = cond3[cond3$accuracy==1,]
corrCond4 = cond4[cond4$accuracy==1,]
plot(density(corrCond1[,3]),xlab='RT (ms)',main='RT histogram 50/50 condition')
plot(density(corrCond2[,3]),xlab='RT (ms)',main='RT histogram 60/40 condition')
plot(density(corrCond3[,3]),xlab='RT (ms)',main='RT histogram 75/25 condition')
plot(density(corrCond4[,3]),xlab='RT (ms)',main='RT histogram 90/10 condition')
plot(density(corrCond1[,3]),xlab='RT (ms)',main='RT histogram 50/50 condition')
plot(density(corrCond2[,3]),xlab='RT (ms)',main='RT histogram 60/40 condition')
plot(density(corrCond4[,3]),xlab='RT (ms)',main='RT histogram 90/10 condition')
rm(list=ls())
data = read.table('/home/patrick/Dropbox/Documents/Groningen/DDM/Day1/day1/subj3Dat.dat')
#in this dataset: column 1==condition; column 2==accuracy; column 3==RT in ms
names(data) = c('condition','accuracy','RT')
data$condition = as.factor(data$condition)
levels(data$condition) = c('50_50','60_40','75_25','90_10')
#select a condition
cond1 = data[data$condition=='50_50',]
cond2 = data[data$condition=='60_40',]
cond3 = data[data$condition=='75_25',]
cond4 = data[data$condition=='90_10',]
#report accuracy in this condition
mean(cond1[,2])
mean(cond2[,2])
mean(cond3[,2])
mean(cond4[,2])
#select only correct trials (since RT is typically only reported for correct trials)
corrCond1 = cond1[cond1$accuracy==1,]
corrCond2 = cond2[cond2$accuracy==1,]
corrCond3 = cond3[cond3$accuracy==1,]
corrCond4 = cond4[cond4$accuracy==1,]
plot(density(corrCond1[,3]),xlab='RT (ms)',main='RT histogram 50/50 condition')
plot(density(corrCond2[,3]),xlab='RT (ms)',main='RT histogram 60/40 condition')
plot(density(corrCond3[,3]),xlab='RT (ms)',main='RT histogram 75/25 condition')
plot(density(corrCond4[,3]),xlab='RT (ms)',main='RT histogram 90/10 condition')
library(rtdists)
install.packages('rtdists')
library(rtdists)
install.packages('gsl')
install.packages('rtdists')
install.packages('gsl')
install.packages('gsl-package')
R.home(component = 'home')
path.expand('~')
cat("\nWelcome at", date(), "\n")
cat("\nWhaddup"\n")
cat("\nWhaddup"",\n")
cat("\nWhaddup","\n")
uninteract()
uinteract()
uninteract()
insertRow
uninteract()
uninteract
